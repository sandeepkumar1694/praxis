import { createClient } from 'npm:@supabase/supabase-js@2';

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
};

interface GeneratedTask {
  title: string;
  description: string;
  level: 'basic' | 'intermediate' | 'pro';
  time_limit_minutes: number;
  expected_output_format: any;
  test_cases: any[];
  company_context: string;
}

Deno.serve(async (req: Request) => {
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    });
  }

  try {
    // Initialize Supabase client
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const today = new Date();
    const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1000);

    // Check if tasks already exist for today
    const { data: existingTasks, error: fetchError } = await supabase
      .from('daily_tasks')
      .select('*')
      .gte('created_at', todayStart.toISOString())
      .lt('created_at', todayEnd.toISOString());

    if (fetchError) {
      throw new Error(`Failed to fetch existing tasks: ${fetchError.message}`);
    }

    if (existingTasks && existingTasks.length >= 3) {
      return new Response(
        JSON.stringify({ 
          tasks: existingTasks,
          message: 'Tasks already exist for today'
        }),
        {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      );
    }

    // Generate new tasks using Gemini AI
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    if (!geminiApiKey) {
      throw new Error('GEMINI_API_KEY not configured');
    }

    const prompt = `Generate 3 coding challenges for a software developer, one basic, one intermediate, and one professional level. Each challenge should be realistic and resemble actual problems from tech companies.

Please respond with a valid JSON array containing exactly 3 objects with these fields:
- title: string (concise, professional title)
- description: string (detailed problem description, 2-3 sentences)
- level: string (must be exactly "basic", "intermediate", or "pro")
- time_limit_minutes: number (30 for basic, 60 for intermediate, 120 for pro)
- expected_output_format: object with function signature and return type
- test_cases: array of objects with "input" and "expected_output" fields
- company_context: string (brief context about the company/team scenario)

Focus on practical, real-world problems like:
- Basic: Data manipulation, simple algorithms
- Intermediate: API design, system components
- Pro: Architecture, distributed systems, optimization

Ensure the JSON is properly formatted and valid.`;

    const geminiResponse = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${geminiApiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{ text: prompt }]
          }]
        })
      }
    );

    if (!geminiResponse.ok) {
      throw new Error(`Gemini API error: ${geminiResponse.statusText}`);
    }

    const geminiData = await geminiResponse.json();
    const generatedText = geminiData.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedText) {
      throw new Error('No content generated by Gemini');
    }

    // Parse the JSON response from Gemini
    let generatedTasks: GeneratedTask[];
    try {
      // Extract JSON from the response (sometimes Gemini includes extra text)
      const jsonMatch = generatedText.match(/\[[\s\S]*\]/);
      const jsonStr = jsonMatch ? jsonMatch[0] : generatedText;
      generatedTasks = JSON.parse(jsonStr);
    } catch (parseError) {
      console.error('Failed to parse Gemini response:', generatedText);
      throw new Error('Invalid JSON response from AI');
    }

    // Validate and insert tasks
    const tasksToInsert = generatedTasks.map(task => ({
      title: task.title,
      description: task.description,
      level: task.level,
      time_limit_minutes: task.time_limit_minutes,
      expected_output_format: task.expected_output_format,
      test_cases: task.test_cases,
      company_context: task.company_context,
      generated_by_ai: true,
      expires_at: todayEnd.toISOString()
    }));

    const { data: insertedTasks, error: insertError } = await supabase
      .from('daily_tasks')
      .insert(tasksToInsert)
      .select();

    if (insertError) {
      throw new Error(`Failed to insert tasks: ${insertError.message}`);
    }

    return new Response(
      JSON.stringify({ 
        tasks: insertedTasks,
        message: 'New tasks generated successfully'
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error) {
    console.error('Error in generate-daily-tasks:', error);
    return new Response(
      JSON.stringify({ 
        error: 'Failed to generate daily tasks',
        details: error.message 
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});